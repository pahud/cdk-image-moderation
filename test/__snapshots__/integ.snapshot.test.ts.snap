// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integ snapshot validation 1`] = `
Object {
  "Outputs": Object {
    "Modbucket496E5AC8": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "s3://",
            Object {
              "Ref": "ModBucket42676A64",
            },
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "AssetParameters9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6dArtifactHash890147A4": Object {
      "Description": "Artifact hash for asset \\"9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6d\\"",
      "Type": "String",
    },
    "AssetParameters9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6dS3Bucket7D0850CE": Object {
      "Description": "S3 bucket for asset \\"9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6d\\"",
      "Type": "String",
    },
    "AssetParameters9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6dS3VersionKey05992C07": Object {
      "Description": "S3 key for asset version \\"9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6d\\"",
      "Type": "String",
    },
    "AssetParametersd182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161facArtifactHashA5D12F44": Object {
      "Description": "Artifact hash for asset \\"d182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161fac\\"",
      "Type": "String",
    },
    "AssetParametersd182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161facS3BucketFFB407D2": Object {
      "Description": "S3 bucket for asset \\"d182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161fac\\"",
      "Type": "String",
    },
    "AssetParametersd182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161facS3VersionKey0715ABF2": Object {
      "Description": "S3 key for asset version \\"d182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161fac\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "DependsOn": Array [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = (event, context) => {
    // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
    const s3 = new (require('aws-sdk').S3)();
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const https = require('https');
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const url = require('url');
    log(JSON.stringify(event, undefined, 2));
    const props = event.ResourceProperties;
    if (event.RequestType === 'Delete') {
        props.NotificationConfiguration = {}; // this is how you clean out notifications
    }
    const req = {
        Bucket: props.BucketName,
        NotificationConfiguration: props.NotificationConfiguration,
    };
    return s3.putBucketNotificationConfiguration(req, (err, data) => {
        log({ err, data });
        if (err) {
            return submitResponse('FAILED', err.message + \`\\\\nMore information in CloudWatch Log Stream: \${context.logStreamName}\`);
        }
        else {
            return submitResponse('SUCCESS');
        }
    });
    function log(obj) {
        console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
    }
    // eslint-disable-next-line max-len
    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
    // to allow sending an error message as a reason.
    function submitResponse(responseStatus, reason) {
        const responseBody = JSON.stringify({
            Status: responseStatus,
            Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
            PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            NoEcho: false,
        });
        log({ responseBody });
        const parsedUrl = url.parse(event.ResponseURL);
        const options = {
            hostname: parsedUrl.hostname,
            port: 443,
            path: parsedUrl.path,
            method: 'PUT',
            headers: {
                'content-type': '',
                'content-length': responseBody.length,
            },
        };
        const request = https.request(options, (r) => {
            log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
            context.done();
        });
        request.on('error', (error) => {
            log({ sendError: error });
            context.done();
        });
        request.write(responseBody);
        request.end();
    }
};",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ModBucket42676A64": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ModBucketAllowBucketNotificationsTomoderationdemoModHandler71999F679DD4980E": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ModHandler382B5E0B",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "ModBucket42676A64",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ModBucketNotificationsB9807B9C": Object {
      "DependsOn": Array [
        "ModBucketAllowBucketNotificationsTomoderationdemoModHandler71999F679DD4980E",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "ModBucket42676A64",
        },
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "ModHandler382B5E0B",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "ModHandler382B5E0B": Object {
      "DependsOn": Array [
        "ModHandlerServiceRoleDefaultPolicyFF267930",
        "ModHandlerServiceRoleF39579BB",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersd182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161facS3BucketFFB407D2",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersd182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161facS3VersionKey0715ABF2",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersd182df1f7437dbde0bf29684476b1edb9c76ba040c1ff0ecb297266e2e161facS3VersionKey0715ABF2",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PREVIEW_TTL": "10",
            "TOPIC_ARN": Object {
              "Ref": "ModTopicC4CDB9CA",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ModHandlerServiceRoleF39579BB",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "ModHandlerServiceRoleDefaultPolicyFF267930": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ModTopicC4CDB9CA",
              },
            },
            Object {
              "Action": "rekognition:DetectModerationLabels",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ModBucket42676A64",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ModBucket42676A64",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ModHandlerServiceRoleDefaultPolicyFF267930",
        "Roles": Array [
          Object {
            "Ref": "ModHandlerServiceRoleF39579BB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ModHandlerServiceRoleF39579BB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ModTopicC4CDB9CA": Object {
      "Type": "AWS::SNS::Topic",
    },
    "SNS2TG62F2E8F4": Object {
      "DependsOn": Array [
        "SNS2TGServiceRole9D27BD42",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6dS3Bucket7D0850CE",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6dS3VersionKey05992C07",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters9003a1a6bdba99fd61152dabae0284c2c8493842fe7963b50f310f5b72744f6dS3VersionKey05992C07",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "TELEGRAM_CHAT_ID": "-547476398",
            "TELEGRAM_TOKEN": "mock",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SNS2TGServiceRole9D27BD42",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SNS2TGAllowInvokemoderationdemoModTopic4CE96D7AF02F5266": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "SNS2TG62F2E8F4",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ModTopicC4CDB9CA",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SNS2TGServiceRole9D27BD42": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SNS2TGTopic9EB38D38": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "SNS2TG62F2E8F4",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ModTopicC4CDB9CA",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
  },
}
`;
